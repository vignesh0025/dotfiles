# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt
#
snippet vd_cmake_boost "Include Requirements for boost" b

set(BOOST_ROOT ../Boost/Release)
find_package(Boost 1.75 REQUIRED system filesystem log thread COMPONENTS)

target_include_directories(${1} PUBLIC \${Boost_INCLUDE_DIR})
# This will automatically add libraries based  on the Find_package COMPONENTS
target_link_libraries(${1} PUBLIC \${Boost_LIBRARIES})

endsnippet

snippet vd_cmake_basics "Basic Cmake commands we use" b
SET(CMAKE_CXX_STANDARD 17)
SET(CMAKE_CXX_STANDARD_REQUIRED True)
SET(CMAKE_EXPORT_COMPILE_COMMANDS On)
SET(CMAKE_VERBOSE_MAKEFILE On)
endsnippet

snippet vd_cmake_lua "Include requirements for Lua Embedded" b
TARGET_INCLUDE_DIRECTORIES(${PROJECT_NAME} PUBLIC ../LuaLib/include)
TARGET_LINK_DIRECTORIES(${PROJECT_NAME} PUBLIC ../LuaLib)
TARGET_LINK_LIBRARIES(${PROJECT_NAME} PUBLIC liblua5.1.a)
TARGET_LINK_LIBRARIES(${PROJECT_NAME} PUBLIC dl)
endsnippet

snippet vd_cmake_head "Description" b
project($1)
cmake_minimum_required(VERSION 3.16)
endsnippet
